// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/ONSdigital/dp-mongodb/dplock"
	"github.com/square/mongo-lock"
	"sync"
)

var (
	lockClientMockUnlock sync.RWMutex
	lockClientMockXLock  sync.RWMutex
)

// Ensure, that ClientMock does implement dplock.Client.
// If this is not the case, regenerate this file with moq.
var _ dplock.Client = &ClientMock{}

// ClientMock is a mock implementation of dplock.Client.
//
//     func TestSomethingThatUsesClient(t *testing.T) {
//
//         // make and configure a mocked dplock.Client
//         mockedClient := &ClientMock{
//             UnlockFunc: func(lockID string) ([]lock.LockStatus, error) {
// 	               panic("mock out the Unlock method")
//             },
//             XLockFunc: func(resourceName string, lockID string, ld lock.LockDetails) error {
// 	               panic("mock out the XLock method")
//             },
//         }
//
//         // use mockedClient in code that requires dplock.Client
//         // and then make assertions.
//
//     }
type ClientMock struct {
	// UnlockFunc mocks the Unlock method.
	UnlockFunc func(lockID string) ([]lock.LockStatus, error)

	// XLockFunc mocks the XLock method.
	XLockFunc func(resourceName string, lockID string, ld lock.LockDetails) error

	// calls tracks calls to the methods.
	calls struct {
		// Unlock holds details about calls to the Unlock method.
		Unlock []struct {
			// LockID is the lockID argument value.
			LockID string
		}
		// XLock holds details about calls to the XLock method.
		XLock []struct {
			// ResourceName is the resourceName argument value.
			ResourceName string
			// LockID is the lockID argument value.
			LockID string
			// Ld is the ld argument value.
			Ld lock.LockDetails
		}
	}
}

// Unlock calls UnlockFunc.
func (mock *ClientMock) Unlock(lockID string) ([]lock.LockStatus, error) {
	if mock.UnlockFunc == nil {
		panic("ClientMock.UnlockFunc: method is nil but Client.Unlock was just called")
	}
	callInfo := struct {
		LockID string
	}{
		LockID: lockID,
	}
	lockClientMockUnlock.Lock()
	mock.calls.Unlock = append(mock.calls.Unlock, callInfo)
	lockClientMockUnlock.Unlock()
	return mock.UnlockFunc(lockID)
}

// UnlockCalls gets all the calls that were made to Unlock.
// Check the length with:
//     len(mockedClient.UnlockCalls())
func (mock *ClientMock) UnlockCalls() []struct {
	LockID string
} {
	var calls []struct {
		LockID string
	}
	lockClientMockUnlock.RLock()
	calls = mock.calls.Unlock
	lockClientMockUnlock.RUnlock()
	return calls
}

// XLock calls XLockFunc.
func (mock *ClientMock) XLock(resourceName string, lockID string, ld lock.LockDetails) error {
	if mock.XLockFunc == nil {
		panic("ClientMock.XLockFunc: method is nil but Client.XLock was just called")
	}
	callInfo := struct {
		ResourceName string
		LockID       string
		Ld           lock.LockDetails
	}{
		ResourceName: resourceName,
		LockID:       lockID,
		Ld:           ld,
	}
	lockClientMockXLock.Lock()
	mock.calls.XLock = append(mock.calls.XLock, callInfo)
	lockClientMockXLock.Unlock()
	return mock.XLockFunc(resourceName, lockID, ld)
}

// XLockCalls gets all the calls that were made to XLock.
// Check the length with:
//     len(mockedClient.XLockCalls())
func (mock *ClientMock) XLockCalls() []struct {
	ResourceName string
	LockID       string
	Ld           lock.LockDetails
} {
	var calls []struct {
		ResourceName string
		LockID       string
		Ld           lock.LockDetails
	}
	lockClientMockXLock.RLock()
	calls = mock.calls.XLock
	lockClientMockXLock.RUnlock()
	return calls
}
