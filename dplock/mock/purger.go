// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-mongodb/v2/dplock"
	"github.com/square/mongo-lock"
	"sync"
)

var (
	lockPurgerMockPurge sync.RWMutex
)

// Ensure, that PurgerMock does implement dplock.Purger.
// If this is not the case, regenerate this file with moq.
var _ dplock.Purger = &PurgerMock{}

// PurgerMock is a mock implementation of dplock.Purger.
//
//     func TestSomethingThatUsesPurger(t *testing.T) {
//
//         // make and configure a mocked dplock.Purger
//         mockedPurger := &PurgerMock{
//             PurgeFunc: func(ctx context.Context) ([]lock.LockStatus, error) {
// 	               panic("mock out the Purge method")
//             },
//         }
//
//         // use mockedPurger in code that requires dplock.Purger
//         // and then make assertions.
//
//     }
type PurgerMock struct {
	// PurgeFunc mocks the Purge method.
	PurgeFunc func(ctx context.Context) ([]lock.LockStatus, error)

	// calls tracks calls to the methods.
	calls struct {
		// Purge holds details about calls to the Purge method.
		Purge []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// Purge calls PurgeFunc.
func (mock *PurgerMock) Purge(ctx context.Context) ([]lock.LockStatus, error) {
	if mock.PurgeFunc == nil {
		panic("PurgerMock.PurgeFunc: method is nil but Purger.Purge was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockPurgerMockPurge.Lock()
	mock.calls.Purge = append(mock.calls.Purge, callInfo)
	lockPurgerMockPurge.Unlock()
	return mock.PurgeFunc(ctx)
}

// PurgeCalls gets all the calls that were made to Purge.
// Check the length with:
//     len(mockedPurger.PurgeCalls())
func (mock *PurgerMock) PurgeCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockPurgerMockPurge.RLock()
	calls = mock.calls.Purge
	lockPurgerMockPurge.RUnlock()
	return calls
}
