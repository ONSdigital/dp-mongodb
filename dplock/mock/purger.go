// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package dplock

import (
	"context"
	"github.com/ONSdigital/dp-mongodb/v3/dplock"
	lock "github.com/square/mongo-lock"
	"sync"
)

// Ensure, that PurgerMock does implement Purger.
// If this is not the case, regenerate this file with moq.
var _ dplock.Purger = &PurgerMock{}

// PurgerMock is a mock implementation of Purger.
//
// 	func TestSomethingThatUsesPurger(t *testing.T) {
//
// 		// make and configure a mocked Purger
// 		mockedPurger := &PurgerMock{
// 			PurgeFunc: func(ctx context.Context) ([]lock.LockStatus, error) {
// 				panic("mock out the Purge method")
// 			},
// 		}
//
// 		// use mockedPurger in code that requires Purger
// 		// and then make assertions.
//
// 	}
type PurgerMock struct {
	// PurgeFunc mocks the Purge method.
	PurgeFunc func(ctx context.Context) ([]lock.LockStatus, error)

	// calls tracks calls to the methods.
	calls struct {
		// Purge holds details about calls to the Purge method.
		Purge []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockPurge sync.RWMutex
}

// Purge calls PurgeFunc.
func (mock *PurgerMock) Purge(ctx context.Context) ([]lock.LockStatus, error) {
	if mock.PurgeFunc == nil {
		panic("PurgerMock.PurgeFunc: method is nil but Purger.Purge was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockPurge.Lock()
	mock.calls.Purge = append(mock.calls.Purge, callInfo)
	mock.lockPurge.Unlock()
	return mock.PurgeFunc(ctx)
}

// PurgeCalls gets all the calls that were made to Purge.
// Check the length with:
//     len(mockedPurger.PurgeCalls())
func (mock *PurgerMock) PurgeCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockPurge.RLock()
	calls = mock.calls.Purge
	mock.lockPurge.RUnlock()
	return calls
}
