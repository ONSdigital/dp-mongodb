// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package health

import (
	"gopkg.in/mgo.v2"
	"sync"
)

// Ensure, that sessionerMock does implement sessioner.
// If this is not the case, regenerate this file with moq.
var _ sessioner = &sessionerMock{}

// sessionerMock is a mock implementation of sessioner.
//
//     func TestSomethingThatUsessessioner(t *testing.T) {
//
//         // make and configure a mocked sessioner
//         mockedsessioner := &sessionerMock{
//             CloseFunc: func() *mgo.Session {
// 	               panic("mock out the Close method")
//             },
//             CopyFunc: func() *mgo.Session {
// 	               panic("mock out the Copy method")
//             },
//             DBFunc: func(name string) *mgo.Database {
// 	               panic("mock out the DB method")
//             },
//             PingFunc: func() *mgo.Session {
// 	               panic("mock out the Ping method")
//             },
//         }
//
//         // use mockedsessioner in code that requires sessioner
//         // and then make assertions.
//
//     }
type sessionerMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() *mgo.Session

	// CopyFunc mocks the Copy method.
	CopyFunc func() *mgo.Session

	// DBFunc mocks the DB method.
	DBFunc func(name string) *mgo.Database

	// PingFunc mocks the Ping method.
	PingFunc func() *mgo.Session

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// Copy holds details about calls to the Copy method.
		Copy []struct {
		}
		// DB holds details about calls to the DB method.
		DB []struct {
			// Name is the name argument value.
			Name string
		}
		// Ping holds details about calls to the Ping method.
		Ping []struct {
		}
	}
	lockClose sync.RWMutex
	lockCopy  sync.RWMutex
	lockDB    sync.RWMutex
	lockPing  sync.RWMutex
}

// Close calls CloseFunc.
func (mock *sessionerMock) Close() *mgo.Session {
	if mock.CloseFunc == nil {
		panic("sessionerMock.CloseFunc: method is nil but sessioner.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedsessioner.CloseCalls())
func (mock *sessionerMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// Copy calls CopyFunc.
func (mock *sessionerMock) Copy() *mgo.Session {
	if mock.CopyFunc == nil {
		panic("sessionerMock.CopyFunc: method is nil but sessioner.Copy was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCopy.Lock()
	mock.calls.Copy = append(mock.calls.Copy, callInfo)
	mock.lockCopy.Unlock()
	return mock.CopyFunc()
}

// CopyCalls gets all the calls that were made to Copy.
// Check the length with:
//     len(mockedsessioner.CopyCalls())
func (mock *sessionerMock) CopyCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCopy.RLock()
	calls = mock.calls.Copy
	mock.lockCopy.RUnlock()
	return calls
}

// DB calls DBFunc.
func (mock *sessionerMock) DB(name string) *mgo.Database {
	if mock.DBFunc == nil {
		panic("sessionerMock.DBFunc: method is nil but sessioner.DB was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockDB.Lock()
	mock.calls.DB = append(mock.calls.DB, callInfo)
	mock.lockDB.Unlock()
	return mock.DBFunc(name)
}

// DBCalls gets all the calls that were made to DB.
// Check the length with:
//     len(mockedsessioner.DBCalls())
func (mock *sessionerMock) DBCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockDB.RLock()
	calls = mock.calls.DB
	mock.lockDB.RUnlock()
	return calls
}

// Ping calls PingFunc.
func (mock *sessionerMock) Ping() *mgo.Session {
	if mock.PingFunc == nil {
		panic("sessionerMock.PingFunc: method is nil but sessioner.Ping was just called")
	}
	callInfo := struct {
	}{}
	mock.lockPing.Lock()
	mock.calls.Ping = append(mock.calls.Ping, callInfo)
	mock.lockPing.Unlock()
	return mock.PingFunc()
}

// PingCalls gets all the calls that were made to Ping.
// Check the length with:
//     len(mockedsessioner.PingCalls())
func (mock *sessionerMock) PingCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockPing.RLock()
	calls = mock.calls.Ping
	mock.lockPing.RUnlock()
	return calls
}
