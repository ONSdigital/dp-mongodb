// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/ONSdigital/dp-mongodb/health"
	"sync"
)

var (
	lockCheckStateMockUpdate sync.RWMutex
)

// Ensure, that CheckStateMock does implement health.CheckState.
// If this is not the case, regenerate this file with moq.
var _ health.CheckState = &CheckStateMock{}

// CheckStateMock is a mock implementation of health.CheckState.
//
//     func TestSomethingThatUsesCheckState(t *testing.T) {
//
//         // make and configure a mocked health.CheckState
//         mockedCheckState := &CheckStateMock{
//             UpdateFunc: func(status string, message string, statusCode int) error {
// 	               panic("mock out the Update method")
//             },
//         }
//
//         // use mockedCheckState in code that requires health.CheckState
//         // and then make assertions.
//
//     }
type CheckStateMock struct {
	// UpdateFunc mocks the Update method.
	UpdateFunc func(status string, message string, statusCode int) error

	// calls tracks calls to the methods.
	calls struct {
		// Update holds details about calls to the Update method.
		Update []struct {
			// Status is the status argument value.
			Status string
			// Message is the message argument value.
			Message string
			// StatusCode is the statusCode argument value.
			StatusCode int
		}
	}
}

// Update calls UpdateFunc.
func (mock *CheckStateMock) Update(status string, message string, statusCode int) error {
	if mock.UpdateFunc == nil {
		panic("CheckStateMock.UpdateFunc: method is nil but CheckState.Update was just called")
	}
	callInfo := struct {
		Status     string
		Message    string
		StatusCode int
	}{
		Status:     status,
		Message:    message,
		StatusCode: statusCode,
	}
	lockCheckStateMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockCheckStateMockUpdate.Unlock()
	return mock.UpdateFunc(status, message, statusCode)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedCheckState.UpdateCalls())
func (mock *CheckStateMock) UpdateCalls() []struct {
	Status     string
	Message    string
	StatusCode int
} {
	var calls []struct {
		Status     string
		Message    string
		StatusCode int
	}
	lockCheckStateMockUpdate.RLock()
	calls = mock.calls.Update
	lockCheckStateMockUpdate.RUnlock()
	return calls
}
